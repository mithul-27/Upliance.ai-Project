import streamlit as st
from streamlit_option_menu import option_menu
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import pandas as pd
from PIL import Image


st.set_page_config(page_title='Upliance.ai',initial_sidebar_state='expanded',
                        layout='wide')

custom_css = """
<style>
    /* Set page background color */
    .main {
        background-color: #f8f2dc;
    }

    /* Style the title */
    .title-text {
        color: #3B1F8D;
        text-align: center;
        font-size: 45px;
        font-weight: bold;
        margin-top: 20px;
    }
</style>
"""

st.markdown(custom_css, unsafe_allow_html=True)
st.markdown('<h1 class="title-text">Upliance.ai Project</h1>', unsafe_allow_html=True)

df= pd.read_excel("cleaned_excel.xlsx")
user_details = pd.read_excel("Assignment.xlsx", sheet_name=0)
cooking_sessions = pd.read_excel("Assignment.xlsx", sheet_name=1)
order_details = pd.read_excel("Assignment.xlsx", sheet_name=2)
order_details['Rating'].fillna(order_details['Rating'].mean(), inplace=True)
sessions_users = pd.merge(cooking_sessions, user_details, on='User ID', how='inner')


tabs = option_menu("",options=["Assignment Part", "About Me"],
                        icons=["briefcase","house-door-fill"],
                        default_index=0,
                        orientation="horizontal",
                        styles={
            "container": {"padding": "8px", "margin": "0", "background-color": "#3B1F8D"},
            "icon": {"color": "white", "font-size": "20px"},
            "nav-link": {"font-size": "20px", "color": "white", "font-weight": "bold", "text-align": "center"},
            "nav-link-selected": { "background-color": "transparent", "color": "#8CD867", "font-weight": "bold"}
        })

if tabs == "Assignment Part":
        


        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Frequency of Dishes Ordered</h1>
                    </div>
                    """, unsafe_allow_html=True)

        cooking_order_correlation = df.groupby('Dish Name')['Order ID'].count().reset_index()
        cooking_order_correlation = cooking_order_correlation.sort_values(by='Order ID', ascending=False)

        fig = px.bar(cooking_order_correlation, x='Dish Name', y='Order ID',
                    title="Frequency of Dishes Ordered",
                    text='Order ID', color='Order ID', color_continuous_scale='Cividis')
        fig.update_layout(xaxis_title="Dish Name", yaxis_title="Order Frequency", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A bar chart displaying the number of cooking sessions by meal type. 
                    Spaghetti and Grilled chicken is the most popular dishes that had a significantly higher order frequency compared to others. 
                    This indicates a strong preference for these dishes, likely influenced by cooking session participation.
                    Enhancing or ensuring the quality of these dishes might strengthen the user experience.
                    </div>
                    """, unsafe_allow_html=True)
        


        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Revenue by Each Dish</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        revenue_by_dish = df.groupby('Dish Name')['Amount (USD)'].sum().reset_index()
        revenue_by_dish = revenue_by_dish.sort_values(by='Amount (USD)', ascending=True)

        fig = px.bar(revenue_by_dish, x='Amount (USD)', y='Dish Name', orientation = 'h', title="Revenue by Dishes",
                    text='Amount (USD)', color='Amount (USD)', color_continuous_scale='Viridis')
        fig.update_layout(xaxis_title="Dish Name", yaxis_title="Total Revenue (USD)", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        Interactive bar plot for the revenue generated by dishes. 
                        The highest revenue-generating dishes, such as Spaghetti and Grilled chicken, 
                    corresponded to those most frequently ordered which showcases both popularity and profitability.
                                       </div>
                    """, unsafe_allow_html=True)
        


        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Distribution of Cooking Session Ratings</h1>
                    </div>
                    """, unsafe_allow_html=True)
        fig = px.box(df, x='Session Rating', title="Distribution of Cooking Session Ratings",
             color_discrete_sequence=['purple'])
        fig.update_layout(xaxis_title="Session Rating", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A box plot visualized the distribution of session ratings. 
                        The majority of sessions received favorable ratings and minimum rating being 4, shows the consistentcy 
                        and reliability on the product for most of the dishes. For addressing dishes with lower rating, 
                        focus on gathering user feedback and maintaining higher session standards must be made.
                                       </div>
                    """, unsafe_allow_html=True)


        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Cooking Duration and Order Frequency</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        df['Order Frequency'] = df.groupby('User ID')['Order ID'].transform('count')

        fig = px.scatter(df, x='Duration (mins)', y='Order Frequency',
                        title="Time Spent Cooking vs Order Frequency",
                        color='Order Frequency', size='Order Frequency',
                        labels={'Duration (mins)': 'Duration (mins)', 'Order Frequency': 'Order Frequency'},
                        color_continuous_scale='Bluered')
        fig.update_layout(xaxis_title="Duration (mins)", yaxis_title="Order Frequency", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A scatter plot explored the relationship between time spent cooking and order frequency. 
                        Dishes with longer cooking sessions correlated with increased order frequency 
                        suggests inclusion of complex dishes with higher cooking duration in the platform.
                        Can also encourage longer sessions through gamification or rewards, fostering greater user engagement.
                                       </div>
                    """, unsafe_allow_html=True)
        



        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Orders by Age Group</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        df['Age Group'] = pd.cut(df['Age'], bins=[0, 20, 30, 40, 50, 100],
                                   labels=['0-20', '20-30', '30-40', '40-50', '50+'])

        age_orders = df.groupby('Age Group')['Order ID'].count().reset_index()
        age_orders.columns = ['Age Group', 'Order Count']

        fig = px.bar(age_orders, x='Age Group', y='Order Count',
                    title="Orders by Age Group", text='Order Count',
                    color='Age Group', color_discrete_sequence=px.colors.qualitative.Dark2)
        fig.update_layout(xaxis_title="Age Group", yaxis_title="Order Count", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A bar chart depicted the number of orders across different age groups. 
                        The 20-30 age group emerged as the most active demographic driving the majority of orders. 
                        This indicates the focus that should be made towards the age group by tailoring promotions and campaigns 
                    to them while developing strategies to engage other age segments.
                                       </div>
                    """, unsafe_allow_html=True)
        


        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Cooking Sessions by Meal Type</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        meal_type_counts = cooking_sessions['Meal Type'].value_counts().reset_index()
        meal_type_counts.columns = ['Meal Type', 'count']
        col1, col2 = st.columns(2)

        with col1:
                    fig = px.pie(meal_type_counts, names='Meal Type', values='count', title="Cooking Sessions by Meal Type",
                                color_discrete_sequence=px.colors.qualitative.Set2)
                    fig.update_layout(xaxis_title="Meal Type", yaxis_title="Number of Sessions", height=500, width=600)
                    fig.update_traces(textinfo='percent+label')
                    st.plotly_chart(fig)

        with col2:
                st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A pie chart illustrated the distribution of cooking sessions across meal types. 
                        Dinner sessions accounted for the largest share which emphasizing the platform's relevance during evening hours. 
                        Developing features or content specifically for dinner preparations such as exclusive dinner dishes is recommended.
                                       </div>
                    """, unsafe_allow_html=True)
                



        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Cooking Session Duration by Meal Type</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        fig = px.box(df, x='Meal Type', y='Duration (mins)',
             title="Cooking Session Duration by Meal Type",
             color='Meal Type', color_discrete_sequence=px.colors.qualitative.Prism)
        fig.update_layout(xaxis_title="Meal Type", yaxis_title="Duration (mins)", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A box plot compared the duration of cooking sessions by meal type.
                        Dinner sessions accounted for the largest share which emphasizing the platform's relevance during evening hours. 
                        Also Breakfast has highest diversity in cooking session describing availability of multiple dishes in that meal type.
                        This can be further boosted by offering premium content or exclusive recipes for dinner sessions to maximize engagement.
                                       </div>
                    """, unsafe_allow_html=True)
        



        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Ratings vs. Revenue per Dish</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        dish_analysis = df.groupby('Dish Name').agg({'Rating': 'mean',
                                                      'Amount (USD)': 'sum'}).reset_index()
        dish_analysis.columns = ['Dish Name', 'Average Rating', 'Total Revenue']

        fig = px.scatter(dish_analysis, x='Average Rating', y='Total Revenue',
                        size='Total Revenue', color='Average Rating',
                        title="Ratings vs. Revenue per Dish",
                        labels={'Average Rating': 'Average Dish Rating', 'Total Revenue': 'Total Revenue (USD)'},
                        color_continuous_scale='Magma')
        fig.update_traces(marker=dict(opacity=0.7, line=dict(width=1, color='DarkSlateGrey')))
        fig.update_layout(xaxis_title="Average Rating", yaxis_title="Total Revenue (USD)", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A scatter plot analyzed the relationship between dish ratings and total revenue.
                        Higher-rated dishes corresponded to greater revenue generation which emphasizes the importance of user satisfaction. 
                        This can be improved by monitoring dish ratings and refine recipes for low-performing dishes to drive sales.
                                       </div>
                    """, unsafe_allow_html=True)
        



        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Trend of Orders Over Time</h1>
                    </div>
                    """, unsafe_allow_html=True)
        
        df['Order Date'] = pd.to_datetime(df['Order Date'])
        orders_trend = df.groupby(df['Order Date'].dt.to_period('D')).size().reset_index(name='Order Count')
        orders_trend['Order Date'] = orders_trend['Order Date'].astype(str)

        fig = px.line(orders_trend, x='Order Date', y='Order Count',
                    title="Trend of Orders Over Time")
        fig.update_traces(line=dict(color='blue', width=2))
        fig.update_layout(xaxis_title="Date", yaxis_title="Number of Orders", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A line chart tracked the number of orders over time. 
                        Data shows consistent orders throughout the month. 
                        Line chart falls flat with because of the insufficiant data given for conducting time series analysis.
                        But in general, it can be enhanced by scheduling targeted marketing campaigns and optimizing inventory for peak periods such as weekends and other holidays.
                                       </div>
                    """, unsafe_allow_html=True)
        




        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Trend of Orders Over the Hour Cooked</h1>
                    </div>
                    """, unsafe_allow_html=True)

        df['Hour Cooked'] = df['Session Start'].dt.hour

        orders_by_hour = df.groupby('Hour Cooked').size().reset_index(name='Order Count')

        fig = px.line(orders_by_hour, x='Hour Cooked', y='Order Count',
                    title="Trend of Orders Over the Hour Cooked")
        fig.update_layout(xaxis_title="Hour of Cooking Session", yaxis_title="Number of Orders", width=1400, height=500)
        fig.update_traces(line=dict(color='green', width=2))
        st.plotly_chart(fig)

        st.markdown("""
                    <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                        A line chart analyzed orders by the hour of cooking sessions. 
                        Orders were peaked during evening hours (6 PM to 8 PM) that aligns with typical dinner times. 
                        Focus on enhancing platform performance and logistics during these hours to ensure a seamless experience produces a greater impact.
                                       </div>
                    """, unsafe_allow_html=True)
        




        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Order Status Breakdown</h1>
                    </div>
                    """, unsafe_allow_html=True)

        order_status_counts = df['Order Status'].value_counts().reset_index()
        order_status_counts.columns = ['Order Status', 'Count']

        col1, col2 = st.columns(2)

        with col1:
                fig = px.pie(order_status_counts, values='Count', names='Order Status', title="Order Status Breakdown",
                            color_discrete_sequence=px.colors.qualitative.Pastel)
                fig.update_layout(height=500, width=600)
                fig.update_traces(textinfo='percent+label')
                st.plotly_chart(fig)

        with col2:
                st.markdown("""
                            <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                                A pie chart displayed the proportion of different order statuses. 
                                With minimal cancellations, majority of orders were completed successfully. 
                                A Brief Investigation on reasons for cancellations and implementing measures to improve order completion rates will lead to betterment.
                                            </div>
                            """, unsafe_allow_html=True)





        st.markdown(" ")
        st.markdown("""
                    <div>
                        <h1 style="color: #FF7800; font-size: 30px;">Order Status Trend Over Time</h1>
                    </div>
                    """, unsafe_allow_html=True)

        order_status_trend = order_details.groupby([order_details['Order Date'].dt.to_period('D'), 'Order Status']).size().reset_index(name='Order Count')
        order_status_trend['Order Date'] = order_status_trend['Order Date'].astype(str)

        fig = px.line(order_status_trend, x='Order Date', y='Order Count', color='Order Status',
                    title="Order Status Trend Over Time",
                    labels={'Order Date': 'Date', 'Order Count': 'Number of Orders'})


        fig.update_traces(line=dict(width=2))
        fig.update_layout(title="Order Status Trend Over Time",
                        xaxis_title="Date",
                        yaxis_title="Number of Orders",
                        legend_title="Order Status", width=1400, height=500)
        st.plotly_chart(fig)

        st.markdown("""
                            <div style="font-family: sans-serif; color: #3B1F8E; font-size: 18px;">
                                A line chart illustrated trends in order statuses over time. 
                                While completed orders dominated, occasional indication of cancellations were noted during specific periods. 
                                Analyze these indiactors to identify patterns and mitigate potential issues that arise during specific periods.
                                            </div>
                            """, unsafe_allow_html=True)




if tabs == "About Me":
        
                st.markdown("""
                    <style>
                    .about-me-container {
                        display: flex;
                        flex-direction: row;
                        justify-content: space-between;
                        padding: 20px;
                    }
                    .left-column {
                        flex: 1;
                        padding-right: 20px;
                    }
                    .right-column {
                        flex: 1;
                        text-align: center;
                    }
                    .skill-section {
                        background-color: #f2f2f2;
                        padding: 15px;
                        border-radius: 10px;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                    }
                    .skill-item {
                        background-color: #3B1F8E;
                        color: white;
                        border-radius: 25px;
                        padding: 8px 20px;
                        margin: 5px;
                        font-size: 16px;
                    }
                    .title {
                        color: #3B1F8D;
                        font-size: 40px;
                        font-weight: bold;
                        text-align: center;
                    }
                    .subtitle {
                        color: #555;
                        font-size: 20px;
                        text-align: center;
                    }
                    </style>
                """, unsafe_allow_html=True)

                st.markdown("<div class='title'>Mithul C B</div>", unsafe_allow_html=True)
                st.markdown("<div class='subtitle'>An Aspiring Data Analyst</div>", unsafe_allow_html=True)

                col1, col2 = st.columns([2, 1])

                with col1:
                    st.markdown("### Introduction")
                    st.write("Hi, I'm Mithul C B, a passionate Data Analyst who enjoys uncovering insights from data. "
                            "I'm proficient in Python and SQL, skilled in developing BI dashboards and real-time "
                            "applications using Power BI, MS Excel and Streamlit. Gained Experience in analyzing "
                            "datasets to deliver data-driven insights, optimize decision-making, and enhance marketing"
                            "strategies through coursework and project work.")
 
  
                    st.markdown("### Education")
                    st.write("I hold a degree in Engineer Degree, and I've pursued several certifications in data science, analytics, and programming.")


                with col2:
                    image = Image.open("Passport-size-blazer.jpg")
                    st.image(image, width=250)

                st.markdown("### My Skills", unsafe_allow_html=True)
                skills = ["Data Analysis", "Data Visualization", "Python (Pandas, Numpy, Matplotlib, Seaborn, Plotly, Scikit-learn)", "SQL (MySQL)", "MS Excel", "Power BI", "Microsoft Office Suite (PowerPoint, Word, Outlook)", "Google Workspace"]
                st.markdown("<div class='skill-section'>", unsafe_allow_html=True)

                for skill in skills:
                    st.markdown(f"<span class='skill-item'>{skill}</span>", unsafe_allow_html=True)

                st.markdown("</div>", unsafe_allow_html=True)


                st.markdown("### Get in Touch", unsafe_allow_html=True)
                st.write("Feel free to connect with me via LinkedIn or email. I'd love to hear from you!")
                st.markdown("[LinkedIn](https://linkedin.com/in/mithul-cb)")
                st.markdown("[Email](mailto:cbmithul@gmail.com)")



            